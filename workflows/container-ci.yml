name: container-env

on:
  push:
    branches: [ aws-two-envs ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-1
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names swarm-demo-app >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name swarm-demo-app

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/swarm-demo-app:${{ github.sha }}"
          docker build -f simple-fluid-page/Dockerfile -t "$IMAGE" simple-fluid-page
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Set TF_VAR for image
        run: echo "TF_VAR_image_uri=$IMAGE" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform apply
        id: tf
        working-directory: container-env/terraform
        env:
          TF_VAR_key_name: ${{ secrets.TF_VAR_KEY_NAME }}
        run: |
          terraform init
          terraform apply -auto-approve
          echo "bastion_ip=$(terraform output -raw bastion_public_ip)" >> $GITHUB_OUTPUT

      - name: Install Ansible + Docker dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible python3-pip
          pip3 install docker

      - name: Setup SSH for Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/swarm-key.pem
          chmod 600 ~/.ssh/swarm-key.pem
          # Disable host key checking globally
          echo 'export ANSIBLE_HOST_KEY_CHECKING=False' >> $GITHUB_ENV
          echo "Host *" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          # Bastion
          echo "Host bastion" >> ~/.ssh/config
          echo "  HostName ${{ steps.tf.outputs.bastion_ip }}" >> ~/.ssh/config
          echo "  User ec2-user" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/swarm-key.pem" >> ~/.ssh/config
          echo "  IdentitiesOnly yes" >> ~/.ssh/config
          # Private nodes
          echo "Host 10.*" >> ~/.ssh/config
          echo "  User ec2-user" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/swarm-key.pem" >> ~/.ssh/config
          echo "  IdentitiesOnly yes" >> ~/.ssh/config
          echo "  ProxyJump ec2-user@${{ steps.tf.outputs.bastion_ip }}" >> ~/.ssh/config

      - name: Generate Ansible inventory
        run: terraform -chdir=container-env/terraform output -raw ansible_inventory > ansible/inventory.ini

      - name: Debug Ansible inventory
        run: cat ansible/inventory.ini

      - name: Debug SSH connectivity
        run: |
          echo "Testing SSH via bastion to manager..."
          ssh -vvv 10.0.11.172 echo "SSH OK" || true

      - name: Run Ansible playbooks
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_IMAGE_URI: ${{ env.IMAGE }}
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/site.yml
          ansible-playbook -i ansible/inventory.ini ansible/deploy.yml
